# A friendly name for the workflow, which will appear in the Actions tab on GitHub.
name: Deploy to Vercel

# === THIS IS THE MOST IMPORTANT CHANGE ===
# This trigger allows the workflow to be started manually via the GitHub API,
# which is exactly what our MERN application's backend does.
on:
  workflow_dispatch:

jobs:
  # The 'deploy' job contains all the steps to build and deploy the application.
  deploy:
    # We use the latest stable version of Ubuntu provided by GitHub Actions.
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so the job can access it.
      - name: Checkout Code
        uses: actions/checkout@v4 # Using the latest major version is good practice

      # Step 2: Install the Vercel Command Line Interface (CLI) globally on the runner.
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Step 3: Install the project's dependencies defined in package.json and package-lock.json.
      - name: Install Dependencies
        run: npm install

      # Step 4: Run the build script (e.g., 'vite build') to create the production-ready static assets.
      - name: Build Project
        run: npm run build

      # Step 5: Deploy the project to Vercel.
      # The Vercel CLI will automatically detect the linked project from the .vercel/project.json file.
      # The --prod flag creates a production deployment.
      # The --yes flag automatically confirms any prompts from the CLI.
      # The VERCEL_TOKEN is read from the GitHub repository's encrypted secrets.
      - name: Deploy to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
      
      # === IMPORTANT ===
      # There are NO MORE `curl` steps to call back to our server.
      # The real-time update logic is now handled by the frontend polling the GitHub API
      # via our backend proxy. This makes the workflow file cleaner and more focused.